<%
  const type = locals.type;
  const properties = locals.properties;
  const doc = locals.doc;
-%>
// This file is generated.

package com.mapbox.mapboxsdk.plugins.annotation;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.UiThread;
import android.support.annotation.VisibleForTesting;

import com.mapbox.geojson.Feature;
import com.mapbox.geojson.FeatureCollection;
import com.mapbox.mapboxsdk.maps.MapView;
import com.mapbox.mapboxsdk.maps.MapboxMap;
import com.mapbox.mapboxsdk.style.expressions.Expression;
import com.mapbox.mapboxsdk.style.layers.<%- camelize(type) %>Layer;
import com.mapbox.mapboxsdk.style.sources.GeoJsonSource;
import com.mapbox.mapboxsdk.style.layers.Property;

import java.util.ArrayList;
import java.util.List;

import static com.mapbox.mapboxsdk.plugins.annotation.Symbol.Z_INDEX;
import static com.mapbox.mapboxsdk.style.expressions.Expression.get;
import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.*;

/**
 * The <%- type %> manager allows to add <%- type %>s to a map.
 */
public class <%- camelize(type) %>Manager extends AnnotationManager<<%- camelize(type) %>Layer, <%- camelize(type) %>, <%- camelize(type) %>Options, On<%- camelize(type) %>DragListener, On<%- camelize(type) %>ClickListener, On<%- camelize(type) %>LongClickListener> {

  public static final String ID_GEOJSON_SOURCE = "mapbox-android-<%- type %>-source";
  public static final String ID_GEOJSON_LAYER = "mapbox-android-<%- type %>-layer";

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap the map object to add <%- type %>s to
   */
  @UiThread
  public <%- camelize(type) %>Manager(@NonNull MapView mapView, @NonNull MapboxMap mapboxMap) {
    this(mapView, mapboxMap, null);
  }

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap the map object to add <%- type %>s to
   * @param belowLayerId the id of the layer above the circle layer
   */
  @UiThread
  public <%- camelize(type) %>Manager(@NonNull MapView mapView, @NonNull MapboxMap mapboxMap, @Nullable String belowLayerId) {
    this(mapboxMap, new GeoJsonSource(ID_GEOJSON_SOURCE), new <%- camelize(type) %>Layer(ID_GEOJSON_LAYER, ID_GEOJSON_SOURCE),
    belowLayerId, new DraggableAnnotationController<>(mapView, mapboxMap));
  }

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap     the map object to add <%- type %>s to
   * @param geoJsonSource the geojson source to add <%- type %>s to
   * @param layer         the <%- type %> layer to visualise <%- camelize(type) %>s with
   */
  @VisibleForTesting
  public <%- camelize(type) %>Manager(MapboxMap mapboxMap, @NonNull GeoJsonSource geoJsonSource, @NonNull <%- camelize(type) %>Layer layer, @Nullable String belowLayerId, DraggableAnnotationController<<%- camelize(type) %>, On<%- camelize(type) %>DragListener> draggableAnnotationController) {
<% if (type === "symbol") { -%>
    super(mapboxMap, layer, geoJsonSource, new SymbolComparator(), draggableAnnotationController, belowLayerId);
<% } else { -%>
    super(mapboxMap, layer, geoJsonSource, null, draggableAnnotationController, belowLayerId);
<% } -%>
    initializeDataDrivenPropertyMap();
  }

  /**
   * Create a list of <%- type %>s on the map.
   * <p>
   * <%- camelize(type) %>s are going to be created only for features with a matching geometry.
   * <p>
   * You can inspect a full list of supported feature properties in {@link <%- camelize(type) %>Options#fromFeature(Feature)}.
   *
   * @param json the GeoJSON defining the list of <%- type %>s to build
   * @return the list of built <%- type %>s
   */
  @UiThread
  public List<<%- camelize(type) %>> create(@NonNull String json) {
    return create(FeatureCollection.fromJson(json));
  }

  /**
   * Create a list of <%- type %>s on the map.
   * <p>
   * <%- camelize(type) %>s are going to be created only for features with a matching geometry.
   * <p>
   * You can inspect a full list of supported feature properties in {@link <%- camelize(type) %>Options#fromFeature(Feature)}.
   *
   * @param featureCollection the featureCollection defining the list of <%- type %>s to build
   * @return the list of built <%- type %>s
   */
  @UiThread
  public List<<%- camelize(type) %>> create(@NonNull FeatureCollection featureCollection) {
    List<Feature> features = featureCollection.features();
    List<<%- camelize(type) %>Options> options = new ArrayList<>();
    if (features != null) {
      for (Feature feature : features) {
        <%- camelize(type) %>Options option = <%- camelize(type) %>Options.fromFeature(feature);
        if (option != null) {
          options.add(option);
        }
      }
    }
    return create(options);
  }

  private void initializeDataDrivenPropertyMap() {
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
    propertyUsageMap.put("<%- property.name %>", false);
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
    propertyUsageMap.put(Z_INDEX, false);
<% } -%>
  }

  @Override
  protected void setDataDrivenPropertyIsUsed(@NonNull String property) {
    switch (property) {
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
      case "<%- property.name %>":
        layer.setProperties(<%- camelizeWithLeadingLowercase(property.name) %>(get("<%- property.name %>")));
        break;
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
      case Z_INDEX:
        layer.setProperties(symbolZOrder(Property.SYMBOL_Z_ORDER_SOURCE));
        break;
<% } -%>
    }
  }

  /**
   * Get the layer id of the annotation layer.
   *
   * @return the layer id
   */
  @Override
  String getAnnotationLayerId() {
    return ID_GEOJSON_LAYER;
  }

  /**
   * Get the key of the id of the annotation.
   *
   * @return the key of the id of the annotation
   */
  @Override
  String getAnnotationIdKey() {
    return <%- camelize(type) %>.ID_KEY;
  }

  // Property accessors
<% for (const property of properties) { -%>
<% if (!supportsPropertyFunction(property) && property.name !== "line-gradient" && property.name !== "symbol-z-order") { -%>
  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    return layer.get<%- camelize(property.name) %>().value;
  }

  /**
   * Set the <%- camelize(property.name) %> property
   *
   * @param value property wrapper value around <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), "") %> <%- propertyType(property) %> value) {
    layer.setProperties(<%- camelizeWithLeadingLowercase(property.name) %>(value));
  }

<% } -%>
<% } -%>
  /**
   * Set filter on the managed <%- type %>s.
   *
   * @param expression expression
   */
  public void setFilter(@NonNull Expression expression) {
    layer.setFilter(expression);
  }

  /**
   * Get filter of the managed <%- type %>s.
   *
   * @return expression
   */
  @Nullable
  public Expression getFilter() {
    return layer.getFilter();
  }
}
