<%
  const type = locals.type;
  const properties = locals.properties;
  const doc = locals.doc;
-%>
// This file is generated.

package com.mapbox.mapboxsdk.plugins.annotation;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

import com.google.gson.*;
import com.mapbox.geojson.Geometry;
import com.mapbox.mapboxsdk.style.layers.Property;
import com.mapbox.mapboxsdk.style.layers.PropertyFactory;

import com.mapbox.geojson.*;
import com.mapbox.mapboxsdk.geometry.LatLng;

import java.util.ArrayList;
import java.util.List;

import static com.mapbox.mapboxsdk.plugins.annotation.ConvertUtils.convertArray;
import static com.mapbox.mapboxsdk.plugins.annotation.ConvertUtils.toFloatArray;
import static com.mapbox.mapboxsdk.plugins.annotation.ConvertUtils.toStringArray;

/**
 * Builder class from which a <%- type %> is created.
 */
public class <%- camelize(type) %>Options extends Options<<%- camelize(type) %>> {

  private boolean isDraggable;
  private <%- geometryType(type) %> geometry;
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
  private <%- propertyType(property) %> <%- camelizeWithLeadingLowercase(property.name) %>;
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
  private int zIndex;
<% } -%>

<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
  static final String PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %> = "<%- property.name %>";
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
  static final String PROPERTY_zIndex = "z-index";
<% } -%>
  private static final String PROPERTY_isDraggable = "is-draggable";
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>

  /**
   * Set <%- property.name %> to initialise the <%- type %> with.
   * <p>
   * <%- propertyFactoryMethodDoc(property) %>
   * </p>
   * @param <%- camelizeWithLeadingLowercase(property.name) %> the <%- property.name %> value
   * @return this
   */
  public <%- camelize(type) %>Options with<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> <%- camelizeWithLeadingLowercase(property.name) %>) {
    this.<%- camelizeWithLeadingLowercase(property.name) %> =  <%- camelizeWithLeadingLowercase(property.name) %>;
    return this;
  }

  /**
   * Get the current configured  <%- property.name %> for the <%- type %>
   * <p>
   * <%- propertyFactoryMethodDoc(property) %>
   * </p>
   * @return <%- camelizeWithLeadingLowercase(property.name) %> value
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    return <%- camelizeWithLeadingLowercase(property.name) %>;
  }
<% } -%>
<% } -%>
<% if (type === "circle" || type === "symbol") { -%>

  /**
   * Set the LatLng of the <%- type %>, which represents the location of the <%- type %> on the map
   *
   * @param latLng the location of the <%- type %> in a longitude and latitude pair
   * @return this
   */
  public <%- camelize(type) %>Options withLatLng(LatLng latLng) {
    geometry = Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude());
    return this;
  }

  /**
   * Set the geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   *
   * @param geometry the location of the <%- type %>
   * @return this
   */
  public <%- camelize(type) %>Options withGeometry(<%- geometryType(type) %> geometry) {
    this.geometry = geometry;
    return this;
  }
<% } else if (type === "line") { -%>

  /**
   * Set a list of LatLng for the line, which represents the locations of the line on the map
   *
   * @param latLngs a list of the locations of the line in a longitude and latitude pairs
   * @return this
   */
  public <%- camelize(type) %>Options withLatLngs(List<LatLng> latLngs) {
    List<Point>points = new ArrayList<>();
    for (LatLng latLng : latLngs) {
      points.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
    }
    geometry = LineString.fromLngLats(points);
    return this;
  }

  /**
   * Set the geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   *
   * @param geometry the location of the <%- type %>
   * @return this
   */
  public <%- camelize(type) %>Options withGeometry(LineString geometry) {
    this.geometry = geometry;
    return this;
  }
<% } else { -%>

  /**
   * Set a list of lists of LatLng for the fill, which represents the locations of the fill on the map
   *
   * @param latLngs a list of a lists of the locations of the line in a longitude and latitude pairs
   * @return this
   */
  public <%- camelize(type) %>Options withLatLngs(List<List<LatLng>> latLngs) {
    List<List<Point>> points = new ArrayList<>();
    for (List<LatLng> innerLatLngs : latLngs) {
      List<Point>innerList = new ArrayList<>();
      for (LatLng latLng : innerLatLngs) {
        innerList.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
      }
      points.add(innerList);
    }
    geometry = Polygon.fromLngLats(points);
    return this;
  }

  /**
   * Set the geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   *
   * @param geometry the location of the <%- type %>
   * @return this
   */
  public <%- camelize(type) %>Options withGeometry(Polygon geometry) {
    this.geometry = geometry;
    return this;
  }
<% } -%>
<% if (type === "symbol") { -%>

  /**
   * Set the zIndex of the symbol, which represents the place of the symbol on the map inside a layer.
   * <p>
   * A higher value brings the symbol to the front.
   * </p>
   *
   * @param zIndex the z index
   * @return this
   */
  public SymbolOptions withZIndex(int zIndex) {
    this.zIndex = zIndex;
    return this;
  }

  /**
   * Get the zIndex of the symbol, which represents the place of the symbol on the map inside a layer.
   *
   * @return the z index
   */
  public int getZIndex() {
    return zIndex;
  }
<% } -%>

  /**
   * Returns whether this <%- type %> is draggable, meaning it can be dragged across the screen when touched and moved.
   *
   * @return draggable when touched
   */
  public boolean getDraggable() {
    return isDraggable;
  }

  /**
   * Set whether this <%- type %> should be draggable,
   * meaning it can be dragged across the screen when touched and moved.
   *
   * @param draggable should be draggable
   */
  public <%- camelize(type) %>Options withDraggable(boolean draggable) {
    isDraggable = draggable;
    return this;
  }

  @Override
  <%- camelize(type) %> build(long id, AnnotationManager<?, <%- camelize(type) %>, ?, ?, ?, ?> annotationManager) {
    if (geometry == null) {
      throw new RuntimeException("geometry field is required");
    }
    JsonObject jsonObject = new JsonObject();
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
<% if (propertyType(property).endsWith("[]")) { -%>
    jsonObject.add(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>, convertArray(<%- camelizeWithLeadingLowercase(property.name) %>));
<% } else { -%>
    jsonObject.addProperty(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>, <%- camelizeWithLeadingLowercase(property.name) %>);
<% } -%>
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
    jsonObject.addProperty(PROPERTY_zIndex, zIndex);
<% } -%>
    <%- camelize(type) %> <%- type %> = new <%- camelize(type) %>(id, annotationManager, jsonObject, geometry);
    <%- type %>.setDraggable(isDraggable);
    return <%- type %>;
  }

  /**
   * Creates <%- camelize(type) %>Options out of a Feature.
   *
   * @param feature feature to be converted
   */
  @Nullable
  static <%- camelize(type) %>Options fromFeature(@NonNull Feature feature) {
    if (feature.geometry() == null) {
      throw new RuntimeException("geometry field is required");
    }
<% if (type === "circle" || type === "symbol") { -%>
    if (!(feature.geometry() instanceof Point)) {
<% } else if (type === "line") { -%>
    if (!(feature.geometry() instanceof LineString)) {
<% } else { -%>
    if (!(feature.geometry() instanceof Polygon)) {<% } -%>
      return null;
    }

    <%- camelize(type) %>Options options = new <%- camelize(type) %>Options();
    options.geometry = (<%- geometryType(type) %>) feature.geometry();
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
<% if (propertyType(property).endsWith("[]")) { -%>
    if (feature.hasProperty(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>)) {
      options.<%- camelizeWithLeadingLowercase(property.name) %> = to<%- propertyType(property).slice(0, -2) -%>Array(feature.getProperty(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>).getAsJsonArray());
    }
<% } else { -%>
    if (feature.hasProperty(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>)) {
      options.<%- camelizeWithLeadingLowercase(property.name) %> = feature.getProperty(PROPERTY_<%- camelizeWithLeadingLowercase(property.name) %>).getAs<%- propertyType(property) %>();
    }
<% } -%>
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
    if (feature.hasProperty(PROPERTY_zIndex)) {
      options.zIndex = feature.getProperty(PROPERTY_zIndex).getAsInt();
    }
<% } -%>
    if (feature.hasProperty(PROPERTY_isDraggable)) {
      options.isDraggable = feature.getProperty(PROPERTY_isDraggable).getAsBoolean();
    }
    return options;
  }
}
