<%
  const type = locals.type;
  const properties = locals.properties;
  const doc = locals.doc;
-%>
// This file is generated.

package com.mapbox.mapboxsdk.plugins.annotation;

import android.support.annotation.ColorInt;
import android.support.annotation.UiThread;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.mapbox.geojson.*;
import com.mapbox.mapboxsdk.geometry.LatLng;
import com.mapbox.mapboxsdk.style.layers.Property;
import com.mapbox.mapboxsdk.utils.ColorUtils;

import java.util.ArrayList;
import java.util.List;

@UiThread
public class <%- camelize(type) %> extends Annotation {

<% if (type === "symbol") { -%>
  //public static final String Z_INDEX = "z-index";
<% } -%>
  /**
   * Create a <%- type %>.
   *
   * @param id            the id of the <%- type %>
   * @param jsonObject the features of the annotation
   * @param geometry the geometry of the annotation
   */
  <%- camelize(type) %>(long id, JsonObject jsonObject, Geometry geometry) {
    super(id, jsonObject, geometry);
<% if (type === "symbol") { -%>
    //this.jsonObject.addProperty(Z_INDEX, 0);
<% } -%>
  }
<% if (type === "circle" || type === "symbol") { -%>

  /**
   * Set the LatLng of the <%- type %>, which represents the location of the <%- type %> on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLng the location of the <%- type %> in a longitude and latitude pair
   */
  public void setLatLng(LatLng latLng) {
    geometry = Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude());
  }
<% } else if (type === "line") { -%>

  /**
   * Set a list of LatLng for the line, which represents the locations of the line on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLngs a list of the locations of the line in a longitude and latitude pairs
   */
  public void setLatLngs(List<LatLng> latLngs) {
    List<Point>points = new ArrayList<>();
    for (LatLng latLng : latLngs) {
      points.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
    }
    geometry = LineString.fromLngLats(points);
  }
<% } else { -%>

  /**
   * Set a list of lists of LatLng for the fill, which represents the locations of the fill on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLngs a list of a lists of the locations of the line in a longitude and latitude pairs
   */
  public void setLatLngs(List<List<LatLng>> latLngs) {
    List<List<Point>> points = new ArrayList<>();
    for (List<LatLng> innerLatLngs : latLngs) {
      List<Point>innerList = new ArrayList<>();
      for (LatLng latLng : innerLatLngs) {
        innerList.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
      }
      points.add(innerList);
    }
    geometry = Polygon.fromLngLats(points);
  }
<% } -%>
<% if (type === "circle" || type === "symbol") { -%>

  /**
   * Set the Geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param geometry the geometry of the <%- type %>
   */
  public void setGeometry(Point geometry) {
    this.geometry = geometry;
  }
<% } else if (type === "line") { -%>

  /**
   * Set the Geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param geometry the geometry of the <%- type %>
   */
  public void setGeometry(LineString geometry) {
    this.geometry = geometry;
  }
<% } else { -%>

  /**
   * Set the Geometry of the <%- type %>, which represents the location of the <%- type %> on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param geometry the geometry of the <%- type %>
   */
  public void setGeometry(Polygon geometry) {
    this.geometry = geometry;
  }
<% } -%>
<% if (type === "symbol") { -%>

  ///**
  // * Set the z-index of a symbol.
  // * <p>
  // * If a symbol z-index is higher as another symbol it will be rendered above it.
  // * </p>
  // * <p>
  // * Default value is 0.
  // * </p>
  // *
  // * @param index the z-index value
  // */
  //public void setZIndex(int index) {
  //  jsonObject.addProperty(Z_INDEX, index);
  //  symbolManager.updateSource();
  //}

  ///**
  // * Get the z-index of a symbol.
  // *
  // * @return the z-index value, 0 if not set
  // */
  //public int getZIndex() {
  //  return jsonObject.get(Z_INDEX).getAsInt();
  //}
<% } -%>

  // Property accessors
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
<% if (propertyType(property).endsWith("[]")) { -%>
  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    JsonArray jsonArray = jsonObject.getAsJsonArray("<%-property.name %>");
    <%- propertyType(property) %> value = new <%- propertyType(property).substring(0, propertyType(property).length-1) %>jsonArray.size()];
    for (int i = 0; i < jsonArray.size(); i++) {
      value[i] = jsonArray.get(i).getAs<%- propertyType(property).substring(0, propertyType(property).length-2) %>();
    }
    return value;
  }

  /**
   * Set the <%- camelize(property.name) %> property.
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   * @param value constant property value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    JsonArray jsonArray = new JsonArray();
    for (<%- propertyType(property).substring(0, propertyType(property).length-2) %> element : value) {
      jsonArray.add(element);
    }
    jsonObject.add("<%-property.name %>", jsonArray);
  }
<% } else if (property.type == 'color') { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return color value for <%- propertyType(property) %>
   */
  @ColorInt
  public int get<%- camelize(property.name) %>() {
    return ColorUtils.rgbaToColor(jsonObject.get("<%- property.name %>").getAs<%- propertyType(property) %>());
  }

  /**
   * Set the <%- camelize(property.name) %> property
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param color value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(@ColorInt int color) {
    jsonObject.addProperty("<%- property.name %>", ColorUtils.colorToRgbaString(color));
  }
<% } else { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    return jsonObject.get("<%- property.name %>").getAs<%- propertyType(property) %>();
  }

  /**
   * Set the <%- camelize(property.name) %> property
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param value constant property value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    jsonObject.addProperty("<%- property.name %>", value);
  }
<% } -%>
<% } -%>
<% } -%>
}
