<%
  const type = locals.type;
  const properties = locals.properties;
  const doc = locals.doc;
-%>
// This file is generated.

package com.mapbox.mapboxsdk.plugins.annotation;

import android.support.annotation.ColorInt;
import android.graphics.PointF;
import android.support.annotation.UiThread;
import com.google.gson.JsonArray;
import com.google.gson.JsonNull;
import com.google.gson.JsonObject;
import com.mapbox.geojson.*;
import com.mapbox.mapboxsdk.geometry.LatLng;
import com.mapbox.mapboxsdk.style.layers.Property;
import com.mapbox.mapboxsdk.utils.ColorUtils;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import com.mapbox.android.gestures.MoveDistancesObject;
import com.mapbox.mapboxsdk.maps.Projection;

import java.util.ArrayList;
import java.util.List;

import static com.mapbox.mapboxsdk.constants.GeometryConstants.MAX_MERCATOR_LATITUDE;
import static com.mapbox.mapboxsdk.constants.GeometryConstants.MIN_MERCATOR_LATITUDE;

@UiThread
public class <%- camelize(type) %> extends Annotation<<%- geometryType(type) %>> {

  private final AnnotationManager<?, <%- camelize(type) %>, ?, ?, ?, ?> annotationManager;
<% if (type === "symbol") { -%>

  static final String Z_INDEX = "z-index";
<% } -%>

  /**
   * Create a <%- type %>.
   *
   * @param id            the id of the <%- type %>
   * @param jsonObject the features of the annotation
   * @param geometry the geometry of the annotation
   */
  <%- camelize(type) %>(long id, AnnotationManager<?, <%- camelize(type) %>, ?, ?, ?, ?> annotationManager, JsonObject jsonObject, <%- geometryType(type) %> geometry) {
    super(id, jsonObject, geometry);
    this.annotationManager = annotationManager;
  }

  @Override
  void setUsedDataDrivenProperties() {
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
    if (!(jsonObject.get("<%- property.name %>") instanceof JsonNull)) {
      annotationManager.enableDataDrivenProperty("<%- property.name %>");
    }
<% } -%>
<% } -%>
<% if (type === "symbol") { -%>
    if (!(jsonObject.get(Z_INDEX) instanceof JsonNull)) {
      annotationManager.enableDataDrivenProperty(Z_INDEX);
    }
<% } -%>
  }
<% if (type === "circle" || type === "symbol") { -%>

  /**
   * Set the LatLng of the <%- type %>, which represents the location of the <%- type %> on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLng the location of the <%- type %> in a latitude and longitude pair
   */
  public void setLatLng(LatLng latLng) {
    geometry = Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude());
  }

  /**
   * Get the LatLng of the <%- type %>, which represents the location of the <%- type %> on the map
   *
   * @return the location of the <%- type %>
   */
  @NonNull
  public LatLng getLatLng() {
    return new LatLng(geometry.latitude(), geometry.longitude());
  }
<% } else if (type === "line") { -%>

  /**
   * Set a list of LatLng for the line, which represents the locations of the line on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLngs a list of the locations of the line in a longitude and latitude pairs
   */
  public void setLatLngs(List<LatLng> latLngs) {
    List<Point>points = new ArrayList<>();
    for (LatLng latLng : latLngs) {
      points.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
    }
    geometry = LineString.fromLngLats(points);
  }

  /**
   * Get a list of LatLng for the line, which represents the locations of the line on the map
   *
   * @return a list of the locations of the line in a latitude and longitude pairs
   */
  @NonNull
  public List<LatLng> getLatLngs() {
    LineString lineString = (LineString) geometry;
    List<LatLng> latLngs = new ArrayList<>();
    for (Point point: lineString.coordinates()) {
      latLngs.add(new LatLng(point.latitude(), point.longitude()));
    }
    return latLngs;
  }
<% } else { -%>

  /**
   * Set a list of lists of LatLng for the fill, which represents the locations of the fill on the map
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param latLngs a list of a lists of the locations of the polygon in a latitude and longitude pairs
   */
  public void setLatLngs(List<List<LatLng>> latLngs) {
    List<List<Point>> points = new ArrayList<>();
    for (List<LatLng> innerLatLngs : latLngs) {
      List<Point>innerList = new ArrayList<>();
      for (LatLng latLng : innerLatLngs) {
        innerList.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
      }
      points.add(innerList);
    }
    geometry = Polygon.fromLngLats(points);
  }

  /**
   * Get a list of lists of LatLng for the fill, which represents the locations of the fill on the map
   *
   * @return a list of a lists of the locations of the polygon in a latitude and longitude pairs
   */
  @NonNull
  public List<List<LatLng>> getLatLngs() {
    Polygon polygon = (Polygon) geometry;
    List<List<LatLng>> latLngs = new ArrayList<>();
    List<List<Point>> coordinates = polygon.coordinates();
    if (coordinates != null) {
      for (List<Point> innerPoints : coordinates) {
        List<LatLng> innerList = new ArrayList<>();
        for (Point point : innerPoints) {
          innerList.add(new LatLng(point.latitude(), point.longitude()));
        }
        latLngs.add(innerList);
      }
    }
    return latLngs;
  }
<% } -%>
<% if (type === "symbol") { -%>

  /**
   * Set the z-index of a symbol.
   * <p>
   * If a symbol z-index is higher as another symbol it will be rendered above it.
   * </p>
   * <p>
   * Default value is 0.
   * </p>
   *
   * @param index the z-index value
   */
  public void setZIndex(int index) {
    jsonObject.addProperty(Z_INDEX, index);
  }

  /**
   * Get the z-index of a symbol.
   *
   * @return the z-index value, 0 if not set
   */
  public int getZIndex() {
    return jsonObject.get(Z_INDEX).getAsInt();
  }
<% } -%>

  // Property accessors
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
<% if (propertyType(property).endsWith("[]")) { -%>
<% if (propertyType(property).endsWith("Float[]")) { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return PointF value for <%- propertyType(property) %>
   */
  public PointF get<%- camelize(property.name) %>() {
    JsonArray jsonArray = jsonObject.getAsJsonArray("<%-property.name %>");
    return new PointF(jsonArray.get(0).getAsFloat(), jsonArray.get(1).getAsFloat());
  }

  /**
   * Set the <%- camelize(property.name) %> property.
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   * @param pointF value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(PointF pointF) {
    JsonArray jsonArray = new JsonArray();
    jsonArray.add(pointF.x);
    jsonArray.add(pointF.y);
    jsonObject.add("<%-property.name %>", jsonArray);
  }
<% } else { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    JsonArray jsonArray = jsonObject.getAsJsonArray("<%-property.name %>");
    <%- propertyType(property) %> value = new <%- propertyType(property).substring(0, propertyType(property).length-1) %>jsonArray.size()];
    for (int i = 0; i < jsonArray.size(); i++) {
      value[i] = jsonArray.get(i).getAs<%- propertyType(property).substring(0, propertyType(property).length-2) %>();
    }
    return value;
  }

  /**
   * Set the <%- camelize(property.name) %> property.
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   * @param value constant property value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    JsonArray jsonArray = new JsonArray();
    for (<%- propertyType(property).substring(0, propertyType(property).length-2) %> element : value) {
      jsonArray.add(element);
    }
    jsonObject.add("<%-property.name %>", jsonArray);
  }
<% } -%>
<% } else if (property.type == 'color') { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return color value for <%- propertyType(property) %>
   */
  @ColorInt
  public int get<%- camelize(property.name) %>() {
    return ColorUtils.rgbaToColor(jsonObject.get("<%- property.name %>").getAs<%- propertyType(property) %>());
  }

  /**
   * Set the <%- camelize(property.name) %> property
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param color value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(@ColorInt int color) {
    jsonObject.addProperty("<%- property.name %>", ColorUtils.colorToRgbaString(color));
  }
<% } else { -%>

  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    return jsonObject.get("<%- property.name %>").getAs<%- propertyType(property) %>();
  }

  /**
   * Set the <%- camelize(property.name) %> property
   * <p>
   * To update the <%- type %> on the map use {@link <%- camelize(type) %>Manager#update(Annotation)}.
   * <p>
   *
   * @param value constant property value for <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), " ") %><%- propertyType(property) %> value) {
    jsonObject.addProperty("<%- property.name %>", value);
  }
<% } -%>
<% } -%>
<% } -%>
<% if (type === "circle" || type === "symbol") { -%>

  @Override
  @Nullable
  Geometry getOffsetGeometry(@NonNull Projection projection, @NonNull MoveDistancesObject moveDistancesObject,
                             float touchAreaShiftX, float touchAreaShiftY) {
    PointF pointF = new PointF(
      moveDistancesObject.getCurrentX() - touchAreaShiftX,
      moveDistancesObject.getCurrentY() - touchAreaShiftY
    );

    LatLng latLng = projection.fromScreenLocation(pointF);
    if (latLng.getLatitude() > MAX_MERCATOR_LATITUDE || latLng.getLatitude() < MIN_MERCATOR_LATITUDE) {
      return null;
    }

    return Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude());
  }
<% } else if (type === "line") { -%>

  @Override
  @Nullable
  Geometry getOffsetGeometry(@NonNull Projection projection, @NonNull MoveDistancesObject moveDistancesObject,
                             float touchAreaShiftX, float touchAreaShiftY) {
    List<Point> originalPoints = geometry.coordinates();
    List<Point> resultingPoints = new ArrayList<>(originalPoints.size());
    for (Point jsonPoint : originalPoints) {
      PointF pointF = projection.toScreenLocation(new LatLng(jsonPoint.latitude(), jsonPoint.longitude()));
      pointF.x -= moveDistancesObject.getDistanceXSinceLast();
      pointF.y -= moveDistancesObject.getDistanceYSinceLast();

      LatLng latLng = projection.fromScreenLocation(pointF);
      if (latLng.getLatitude() > MAX_MERCATOR_LATITUDE || latLng.getLatitude() < MIN_MERCATOR_LATITUDE) {
        return null;
      }
      resultingPoints.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
    }

    return LineString.fromLngLats(resultingPoints);
  }
<% } else { -%>

  @Override
  @Nullable
  Geometry getOffsetGeometry(@NonNull Projection projection, @NonNull MoveDistancesObject moveDistancesObject,
                             float touchAreaShiftX, float touchAreaShiftY) {
    List<List<Point>> originalPoints = geometry.coordinates();
    if (originalPoints != null) {
      List<List<Point>> resultingPoints = new ArrayList<>(originalPoints.size());
      for (List<Point> points : originalPoints) {
        List<Point> innerPoints = new ArrayList<>();
        for (Point jsonPoint : points) {
          PointF pointF = projection.toScreenLocation(new LatLng(jsonPoint.latitude(), jsonPoint.longitude()));
          pointF.x -= moveDistancesObject.getDistanceXSinceLast();
          pointF.y -= moveDistancesObject.getDistanceYSinceLast();

          LatLng latLng = projection.fromScreenLocation(pointF);
          if (latLng.getLatitude() > MAX_MERCATOR_LATITUDE || latLng.getLatitude() < MIN_MERCATOR_LATITUDE) {
            return null;
          }
          innerPoints.add(Point.fromLngLat(latLng.getLongitude(), latLng.getLatitude()));
        }
        resultingPoints.add(innerPoints);
      }

      return Polygon.fromLngLats(resultingPoints);
    }

    return null;
  }
<% } -%>

  @Override
  String getName() {
<% if (type === "symbol") { -%>
    return "Symbol";
<% } else if (type === "circle")  { -%>
    return "Circle";
<% } else if (type === "fill")  { -%>
    return "Fill";
<% } else if (type === "line")  { -%>
     return "Line";
<% } else { -%>
    return "Annotation";
<% } -%>
  }
}
