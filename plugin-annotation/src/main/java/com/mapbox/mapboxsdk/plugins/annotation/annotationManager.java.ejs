<%
  const type = locals.type;
  const properties = locals.properties;
  const doc = locals.doc;
-%>
// This file is generated.

package com.mapbox.mapboxsdk.plugins.annotation;

import android.graphics.PointF;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.annotation.UiThread;
import android.support.annotation.VisibleForTesting;
import android.support.v4.util.LongSparseArray;
import com.mapbox.geojson.Feature;
import com.mapbox.geojson.FeatureCollection;
import com.mapbox.mapboxsdk.geometry.LatLng;
import com.mapbox.mapboxsdk.maps.MapboxMap;
import com.mapbox.mapboxsdk.style.layers.PropertyValue;
import com.mapbox.mapboxsdk.style.layers.<%- camelize(type) %>Layer;
import com.mapbox.mapboxsdk.style.sources.GeoJsonSource;
import com.mapbox.mapboxsdk.style.layers.Property;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import static com.mapbox.mapboxsdk.style.expressions.Expression.get;
import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.*;
//import static com.mapbox.mapboxsdk.annotations.symbol.Symbol.Z_INDEX;

/**
 * The <%- type %> manager allows to add <%- type %>s to a map.
 */
public class <%- camelize(type) %>Manager extends AnnotationManager<<%- camelize(type) %>, On<%- camelize(type) %>ClickListener, On<%- camelize(type) %>LongClickListener> {

  public static final String ID_GEOJSON_SOURCE = "mapbox-android-<%- type %>-source";
  public static final String ID_GEOJSON_LAYER = "mapbox-android-<%- type %>-layer";

  private <%- camelize(type) %>Layer layer;
<% if (type === "symbol") { -%>
  //private final SymbolComparator symbolComparator = new SymbolComparator();
<% } -%>

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap the map object to add <%- type %>s to
   */
  @UiThread
  public <%- camelize(type) %>Manager(@NonNull MapboxMap mapboxMap) {
    this(mapboxMap, null);
  }

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap the map object to add <%- type %>s to
   * @param belowLayerId the id of the layer above the circle layer
   */
  @UiThread
  public <%- camelize(type) %>Manager(@NonNull MapboxMap mapboxMap, @Nullable String belowLayerId) {
    this(mapboxMap, new GeoJsonSource(ID_GEOJSON_SOURCE), new <%- camelize(type) %>Layer(ID_GEOJSON_LAYER, ID_GEOJSON_SOURCE)
      .withProperties(
        getLayerDefinition()
      ), belowLayerId);
  }

  /**
   * Create a <%- type %> manager, used to manage <%- type %>s.
   *
   * @param mapboxMap     the map object to add <%- type %>s to
   * @param geoJsonSource the geojson source to add <%- type %>s to
   * @param layer         the <%- type %> layer to visualise <%- camelize(type) %>s with
   */
  @VisibleForTesting
  public <%- camelize(type) %>Manager(MapboxMap mapboxMap, @NonNull GeoJsonSource geoJsonSource, @NonNull <%- camelize(type) %>Layer layer, @Nullable String belowLayerId) {
    super(mapboxMap, geoJsonSource);
    initLayer(layer, belowLayerId);
  }

  /**
   * Initialise the layer on the map.
   *
   * @param layer the layer to be added
   * @param belowLayerId the id of the layer above the circle layer
   */
  private void initLayer(@NonNull <%- camelize(type) %>Layer layer, @Nullable String belowLayerId) {
    this.layer = layer;
    if (belowLayerId == null) {
      mapboxMap.addLayer(layer);
    } else {
      mapboxMap.addLayerBelow(layer, belowLayerId);
    }
  }

  /**
   * Get the layer id of the annotation layer.
   *
   * @return the layer id
   */
  @Override
  String getAnnotationLayerId() {
    return ID_GEOJSON_LAYER;
  }

  /**
   * Get the key of the id of the annotation.
   *
   * @return the key of the id of the annotation
   */
  @Override
  String getAnnotationIdKey() {
    return <%- camelize(type) %>.ID_KEY;
  }

<% if (type === "circle" || type === "symbol") { -%>

  /**
   * Create a <%- type %> on the map from a LatLng coordinate.
   *
   * @param latLng place to layout the <%- type %> on the map
   * @return the newly created <%- type %>
   */
  @UiThread
  public <%- camelize(type) %> create<%- camelize(type) %>(@NonNull LatLng latLng) {
    <%- camelize(type) %> <%- type %> = new <%- camelize(type) %>(this, currentId);
    <%- type %>.setLatLng(latLng);
    add(<%- type %>);
    return <%- type %>;
  }

  /**
   * Create <%- type %>s on the map from a list of LatLng coordinates.
   *
   * @param latLngs places to layout the <%- type %>s on the map
   * @return a list of the newly created <%- type %>s
   */
  @UiThread
  public List<<%- camelize(type) %>> create<%- camelize(type) %>s(@NonNull List<LatLng> latLngs) {
    List<<%- camelize(type) %>> <%- type %>s = new ArrayList<>();
    <%- camelize(type) %> <%- type %>;
    for (LatLng latLng : latLngs) {
      <%- type %> = new <%- camelize(type) %>(this, currentId);
      <%- type %>.setLatLng(latLng, false);
      <%- type %>s.add(<%- type %>);
      add(<%- type %>);
    }
    updateSource();
    return <%- type %>s;
  }
<% } else if (type === "line") { -%>

  /**
   * Create a <%- type %> on the map from a LatLng coordinate.
   *
   * @param latLngs places to layout the <%- type %> on the map
   * @return the newly created <%- type %>
   */
  @UiThread
  public <%- camelize(type) %> create<%- camelize(type) %>(@NonNull List<LatLng> latLngs) {
    <%- camelize(type) %> <%- type %> = new <%- camelize(type) %>(this, currentId);
    <%- type %>.setLatLngs(latLngs);
    add(<%- type %>);
    return <%- type %>;
  }

  /**
   * Create lines on the map from a list of lists of LatLng coordinates.
   *
   * @param latLngs places to layout the lines on the map
   * @return a list of the newly created lines
   */
  @UiThread
  public List<Line> createLines(@NonNull List<List<LatLng>> latLngs) {
    List<Line> lines = new ArrayList<>();
    Line line;
    for (List<LatLng> latLng : latLngs) {
      line = new Line(this, currentId);
      line.setLatLngs(latLng, false);
      lines.add(line);
      add(line);
    }
    updateSource();
    return lines;
  }
<% } else { -%>

  /**
   * Create a <%- type %> on the map from a LatLng coordinate.
   *
   * @param latLngs places to layout the <%- type %> on the map
   * @return the newly created <%- type %>
   */
  @UiThread
  public <%- camelize(type) %> create<%- camelize(type) %>(@NonNull List<List<LatLng>> latLngs) {
    <%- camelize(type) %> <%- type %> = new <%- camelize(type) %>(this, currentId);
    <%- type %>.setLatLngs(latLngs);
    add(<%- type %>);
    return <%- type %>;
  }

  /**
   * Create fills on the map from a list of lists of lists of LatLng coordinates.
   *
   * @param latLngs places to layout the fills on the map
   * @return a list of the newly created fills
   */
  @UiThread
  public List<Fill> createFills(@NonNull List<List<List<LatLng>>> latLngs) {
    List<Fill> fills = new ArrayList<>();
    Fill fill;
    for (List<List<LatLng>> latLng : latLngs) {
      fill = new Fill(this, currentId);
      fill.setLatLngs(latLng, false);
      fills.add(fill);
      add(fill);
    }
    updateSource();
    return fills;
  }
<% } -%>

  private static PropertyValue<?>[] getLayerDefinition() {
    return new PropertyValue[]{
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property) && property.name !== "fill-pattern" && property.name !== "line-pattern") { -%>
      <%- camelizeWithLeadingLowercase(property.name) %>(get("<%- property.name %>")),
<% } -%><% } -%>
<% if (type === "symbol") { -%>
      //symbolZOrder(Property.SYMBOL_Z_ORDER_SOURCE)
<% } -%>
    };
  }

  // Property accessors
<% for (const property of properties) { -%>
<% if (!supportsPropertyFunction(property) && property.name !== "line-gradient" && property.name !== "symbol-z-order") { -%>
  /**
   * Get the <%- camelize(property.name) %> property
   *
   * @return property wrapper value around <%- propertyType(property) %>
   */
  public <%- propertyType(property) %> get<%- camelize(property.name) %>() {
    return layer.get<%- camelize(property.name) %>().value;
  }

  /**
   * Set the <%- camelize(property.name) %> property
   *
   * @param value property wrapper value around <%- propertyType(property) %>
   */
  public void set<%- camelize(property.name) %>(<%- propertyTypeAnnotation(property) %><%- iff(() => propertyTypeAnnotation(property), "") %> <%- propertyType(property) %> value) {
    layer.setProperties(<%- camelizeWithLeadingLowercase(property.name) %>(value));
  }

<% } -%>
<% } -%>

<% if (type === "symbol") { -%>

  //private class SymbolComparator implements Comparator<Feature> {
  //  @Override
  //  public int compare(Feature left, Feature right) {
  //    return right.getProperty(Z_INDEX).getAsInt() - left.getProperty(Z_INDEX).getAsInt();
  //  }
  //}
<% } -%>
}
